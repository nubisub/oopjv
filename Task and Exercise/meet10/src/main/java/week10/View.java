
package week10;
// import java.io.File;
import com.formdev.flatlaf.intellijthemes.FlatDraculaIJTheme;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author hendr
 */
public class View extends javax.swing.JFrame implements Serializable {

    /**
     * Creates new form Save
     */
    public View() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        proses = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        output = new javax.swing.JButton();
        sumKarakterLabel = new javax.swing.JLabel();
        sumBarisLabel = new javax.swing.JLabel();
        sumVokalLabel = new javax.swing.JLabel();
        sumKonsonanLabel = new javax.swing.JLabel();
        sumVokal = new javax.swing.JTextField();
        sumKonsonan = new javax.swing.JTextField();
        sumKarakter = new javax.swing.JTextField();
        sumBaris = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        loadFile = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        input.setColumns(20);
        input.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        input.setLineWrap(true);
        input.setRows(5);
        input.setAutoscrolls(false);
        input.setMaximumSize(new java.awt.Dimension(15, 2147483647));
        jScrollPane1.setViewportView(input);

        proses.setText("Proses Text");
        proses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prosesActionPerformed(evt);
            }
        });

        reset.setText("Clear Text Area");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        output.setText("Save Proses Text (*txt)");
        output.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputActionPerformed(evt);
            }
        });

        sumKarakterLabel.setText("Jumlah Karakter (di luar spasi ) :");

        sumBarisLabel.setText("Jumlah Baris :");

        sumVokalLabel.setText("Jumlah Huruf Vokal :");

        sumKonsonanLabel.setText("Jumlah Huruf Konsonan :");

        sumVokal.setEditable(false);
        sumVokal.setMinimumSize(new java.awt.Dimension(20, 19));

        sumKonsonan.setEditable(false);
        sumKonsonan.setMinimumSize(new java.awt.Dimension(20, 19));

        sumKarakter.setEditable(false);
        sumKarakter.setMinimumSize(new java.awt.Dimension(20, 19));

        sumBaris.setEditable(false);
        sumBaris.setMinimumSize(new java.awt.Dimension(20, 19));

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        loadFile.setText("Open (*.txt)");
        loadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileActionPerformed(evt);
            }
        });
        jMenu1.add(loadFile);

        saveFile.setText("Save (*.txt)");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        jMenu1.add(saveFile);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sumKarakterLabel)
                            .addComponent(sumBarisLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sumKarakter, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .addComponent(sumBaris, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sumVokalLabel)
                            .addComponent(sumKonsonanLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sumVokal, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .addComponent(sumKonsonan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(proses)
                        .addGap(18, 18, 18)
                        .addComponent(reset)
                        .addGap(108, 108, 108)
                        .addComponent(output)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proses)
                    .addComponent(reset)
                    .addComponent(output))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sumKarakterLabel)
                    .addComponent(sumVokalLabel)
                    .addComponent(sumVokal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sumKarakter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sumBarisLabel)
                    .addComponent(sumKonsonanLabel)
                    .addComponent(sumKonsonan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sumBaris, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sumBaris, sumKarakter, sumKonsonan, sumVokal});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // reset all
        input.setText("");
        sumVokal.setText("");
        sumKonsonan.setText("");
        sumKarakter.setText("");
        sumBaris.setText("");
        
        // TODO add your handling code here:
    }//GEN-LAST:event_resetActionPerformed

    private void prosesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prosesActionPerformed
        // Controller controller = new Controller();
        String inputText = input.getText();
        // count text
        int countKarakter = inputText.length();
        // remove spacebar
        String inputTextNew = inputText.replaceAll("\\s", "");
        // count text without spacebar
        int countKarakterNew = inputTextNew.length();
        // inputtext count without space
        sumKarakter.setText(String.valueOf(countKarakterNew));
        // count vocal and konsonan\
        int countVokal = 0;
        int countKonsonan = 0;
        for (int i = 0; i < inputTextNew.length(); i++) {
            // if alphabet
            if (inputTextNew.charAt(i) >= 'a' && inputTextNew.charAt(i) <= 'z') {

            if (inputTextNew.charAt(i) == 'a' || inputTextNew.charAt(i) == 'i' || inputTextNew.charAt(i) == 'u' || inputTextNew.charAt(i) == 'e' || inputTextNew.charAt(i) == 'o') {
                countVokal++;
            } else {
                countKonsonan++;
            }}
            // if in A-Z
            // if uppercase
            else if (inputTextNew.charAt(i) >= 'A' && inputTextNew.charAt(i) <= 'Z') {
                if (inputTextNew.charAt(i) == 'A' || inputTextNew.charAt(i) == 'I' || inputTextNew.charAt(i) == 'U' || inputTextNew.charAt(i) == 'E' || inputTextNew.charAt(i) == 'O') {
                    countVokal++;
                } else {
                    countKonsonan++;
                }
            }
               
        }
        sumVokal.setText(String.valueOf(countVokal));
        sumKonsonan.setText(String.valueOf(countKonsonan));

        // count word
        int countBaris = 0;
        if(inputText.length() > 0){
            countBaris = 1;
        }

        for (int i = 0; i < inputText.length(); i++) {
            if (inputText.charAt(i) == '\n') {
                countBaris++;
            }
        }
        int j = 0;
        for (int i = 0; i < inputText.length(); i++) {
            if(j==62){
                countBaris++;
                j=0;
            }
            j++;
            if (inputText.charAt(i) == '\n') {
                j = 0;
            }
        }
	// salah, harusnya word wrap bukan newline, ada yg lebih simple lagi pake method 
        sumBaris.setText(String.valueOf(countBaris));        
        // sumBaris.setText(String.valueOf("error"));

    }//GEN-LAST:event_prosesActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        // save input to txt
        String inputText = input.getText();
        try {
            // make random file name
            // String fileName = "";
            // uuid
            // UUID uuid = UUID.randomUUID();
            // make file name
            // fileName = uuid.toString();
            // make file
            // FileWriter fileWriter = new FileWriter("" + fileName + ".txt");

            // fileWriter.write(inputText);
            // fileWriter.close();
            // Jfilechooser save
            File path = new File(System.getProperty("user.dir")+"/test");
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(path);
            // fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            // delete folder name
            fileChooser.setDialogTitle("Save File");
            // if exis
            // fileChooser.setSelectedFile(new File(optionalPath + "myFile.txt"));
            int result = fileChooser.showSaveDialog(this);
     
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                FileWriter fileWriter = new FileWriter(file + ".txt", StandardCharsets.UTF_8);
                fileWriter.write(inputText);
                fileWriter.close();
                resetActionPerformed(evt);
            }
                // if success
                // if cancel


        } catch (IOException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_saveFileActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void loadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileActionPerformed
        // TODO add your handling code here:
        // load file
        File dir = new File(System.getProperty("user.dir")+"/test");
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(dir);
        // filter
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        String path = "";
        try {
            if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            path = file.getAbsolutePath();
            }
        } catch (Exception e) {
            System.out.println("Error");
            //TODO: handle exception
        }
        try {
            // read file with utf-8
// filereader with utf-8
// windows 1256
           

            FileReader fr = new FileReader(path, StandardCharsets.UTF_8);
            BufferedReader br = new BufferedReader(fr);
            String line;
            StringBuilder sb = new StringBuilder();
            try {
                while ((line = br.readLine()) != null) {
                    byte[] arr = line.getBytes();
                    String utf8String = new String(arr, StandardCharsets.UTF_8);
                    System.out.println(utf8String);
                    sb.append(line);
                    sb.append("\n");
                }
            } catch (IOException e1) {
                System.out.println("Error");
                // TODO Auto-generated catch block
                // e1.printStackTrace();
            }
            resetActionPerformed(evt);
            // convert sb to utf-8
            sb = new StringBuilder(sb.toString());

            input.setText(sb.toString());
            try {
                br.close();
                fr.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                // e.printStackTrace();
                System.out.println("Error");
            }

        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            // e.printStackTrace();
            System.out.println("Error");
        } catch (IOException e2) {
            // TODO Auto-generated catch block
            e2.printStackTrace();
        }

    }//GEN-LAST:event_loadFileActionPerformed

    private void outputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputActionPerformed
        // write to output
        String output;
        output = "Hasil Proses Text\n";
        output += "=================\n";
        output += "Jumlah Karakter (di luar spasi) : " + sumKarakter.getText() + "\n";
        output += "Jumlah Baris : " + sumBaris.getText() + "\n";
        output += "Jumlah Huruf Vokal : " + sumVokal.getText() + "\n";
        output += "Jumlah Huruf Konsonan : " + sumKonsonan.getText() + "\n";

        // save input to txt
        // String inputText = input.getText();
        try {
            // make random file name
            // String fileName = "";
            // uuid
            // UUID uuid = UUID.randomUUID();
            // make file name
            // fileName = uuid.toString();
            // make file
            // FileWriter fileWriter = new FileWriter("" + fileName + ".txt");

            // fileWriter.write(inputText);
            // fileWriter.close();
            // Jfilechooser save
            File path = new File(System.getProperty("user.dir")+"/test");
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(path);
            // fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            // delete folder name
            fileChooser.setDialogTitle("Save File");
            // if exis
            // fileChooser.setSelectedFile(new File(optionalPath + "myFile.txt"));
            int result = fileChooser.showSaveDialog(this);
     
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                // file writer with utf-8
                
                FileWriter fileWriter = new FileWriter(file + ".txt", StandardCharsets.UTF_8);
                fileWriter.write(output);
                fileWriter.close();
                resetActionPerformed(evt);
            }
                // if success
                // if cancel


        } catch (IOException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            
        }



        
                // saveFileActionPerformed(evt);

// TODO add your handling code here:
    }//GEN-LAST:event_outputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
try {
    UIManager.setLookAndFeel( new FlatDraculaIJTheme() );
} catch( Exception ex ) {
    System.err.println( "Failed to initialize LaF" );
}
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea input;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem loadFile;
    private javax.swing.JButton output;
    private javax.swing.JButton proses;
    private javax.swing.JButton reset;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JTextField sumBaris;
    private javax.swing.JLabel sumBarisLabel;
    private javax.swing.JTextField sumKarakter;
    private javax.swing.JLabel sumKarakterLabel;
    private javax.swing.JTextField sumKonsonan;
    private javax.swing.JLabel sumKonsonanLabel;
    private javax.swing.JTextField sumVokal;
    private javax.swing.JLabel sumVokalLabel;
    // End of variables declaration//GEN-END:variables
}
